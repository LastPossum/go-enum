// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (8.427kB)
// header.tmpl (234B)
// string_enum.tmpl (7.788kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x51\x8f\xdc\xb6\x11\x7e\x96\x7e\xc5\x64\xe1\x24\xd2\x76\xad\x75\xd1\xa2\x0f\x0e\xee\xc1\x08\x52\xa3\x41\x73\x31\x70\x6e\x5e\x0c\xc3\xe0\x49\xa3\x5b\xe6\x24\x52\x21\x29\x9d\xae\xaa\xfe\x7b\x31\x24\xa5\xd5\x6a\xb5\x7b\x57\xf7\x2e\x46\xd1\x97\xc5\x4a\x1c\x0e\xe7\xfb\x66\x38\x9c\xa1\xba\xee\x25\x64\x98\x73\x81\xb0\x42\x51\x97\xab\xbe\x0f\x53\x29\xb4\x81\x28\xa4\xb1\x17\xf4\xf2\x92\x95\x08\xaf\x2f\x20\xa1\x87\xc4\x3e\xbd\xec\x7b\x37\xde\x30\xa5\x69\x2c\xe3\xa9\x81\x55\xc1\xb4\x91\x79\xae\xd1\xac\xe0\x95\x17\x02\xc5\xc4\x0d\xc2\x0b\xf5\x37\x91\x61\xbb\xa1\x29\x45\x3d\xd1\xf7\x0b\x3d\x6a\xe8\xfb\x30\xb0\x1a\x49\xc7\xcf\x56\x07\xc9\x54\x45\x9d\xde\x1e\x2a\x76\x6b\xfe\x0b\x72\xae\xb4\x81\xbe\xef\x3a\x78\x21\xc7\x09\xba\xbe\xf6\x4b\x38\xcd\xc3\xc2\x7e\x01\xe0\x39\xe0\x6f\x83\x84\xc5\xb2\xfa\xb4\xea\xfb\xed\x16\xae\x6e\x79\x55\x61\x06\x6e\xa8\xeb\xb0\xd0\x68\x07\xba\xce\x8b\xbf\x53\x98\xf3\x16\x33\x9a\xd6\xf7\xc0\x35\x30\x1a\x1c\x38\xea\x7b\x90\x39\x98\xfb\x0a\xf7\x53\xdc\x7b\xd2\x26\xb2\x01\x22\xcf\x87\xf5\xbf\x97\x65\x89\xc2\xd0\xc0\x74\x9d\xc9\x6b\x92\x77\x53\x01\xe0\xa4\x25\x7b\x5c\x1e\xec\x2b\xcb\xcb\xd4\xb2\x0b\xe0\xd2\x30\x27\x28\x10\x5e\x8d\x9c\xf5\x3d\xfc\x01\x26\x1c\xd2\x44\xbb\xa2\x63\xc0\xcb\x4f\xdd\x32\x95\x3c\x5e\xe2\xa4\xb6\x17\x9f\xac\x7f\x48\x81\xf5\xe0\xa1\x53\xdd\x1f\x1f\x56\x0e\x71\x1c\x52\xf8\x18\x2c\xab\x82\x19\x84\x95\x36\x8a\x8b\x1b\x54\x2b\x48\xc8\x9b\x61\xc3\x14\x7c\xea\xba\x7d\x58\xf6\xfd\x4f\xac\x82\x0b\x5a\xbf\x64\x15\xcf\xef\x5d\x88\x59\x61\x72\xb0\x9d\x0f\xbc\xac\x0a\x24\x7e\x35\x98\x1d\xfa\xb7\xa8\x80\x0b\x83\x2a\x67\x29\x26\x61\x5e\x8b\x14\xa2\x16\x0e\x95\xc7\x5e\x36\x8a\xc1\x99\x02\x5d\x18\xf0\x9c\x1e\x36\x20\x6f\x09\xdd\xb1\x39\x1f\xda\x8f\xdf\xd1\x60\x17\x06\x81\x42\x53\x2b\x41\xf2\x61\xd0\x87\xc3\x63\x5e\x9a\xe4\xaa\x52\x5c\x98\x3c\x5a\x1d\xce\x8f\xbe\xce\xe2\xd5\x06\xda\x38\x5c\x86\xeb\x22\xdc\x02\xae\xc5\x01\xe4\xa4\x90\x77\xa8\x52\xa6\x71\x40\xff\x8e\x29\x8d\x87\xd3\x81\x19\x62\x97\x88\x90\x90\x4a\xd1\xa0\x32\xc0\x06\x70\x46\xda\xf0\x9e\x4e\xf0\xcc\x2c\xa8\x8a\x04\x6d\x25\x37\x33\x86\xe8\x70\x70\x03\xa8\x94\x54\xb1\xe7\xab\x3d\xc1\x96\x45\xf3\x81\x14\x1d\x51\xd6\x6e\x40\xf0\x22\x0c\xfa\xae\xe3\x39\x24\x42\x0e\xc8\x68\xdf\x7c\x4f\xff\xb9\xd0\x28\x34\x37\xbc\x41\xa8\xc8\xbe\x0d\x64\x04\x40\x63\xc5\x14\x85\x4f\x21\xe5\x6d\x5d\x11\xaa\x4a\x61\x83\xc2\x40\x2d\x04\xa6\xa8\x35\x53\xf7\x90\x4a\x6d\x68\xf7\x0e\xb4\x11\x01\x23\x13\x3c\x87\x3b\x84\x4c\x8a\x6f\x0d\x08\xc4\x0c\x8c\x4c\x1e\x81\xc4\xcd\xd6\xc9\x7b\xf9\x77\xd2\x6a\x29\x8a\xcf\x41\x1b\x02\x3f\xf0\x28\x59\x89\xda\x66\xd1\x41\x76\xc6\xf9\xab\x78\x63\xa3\xe7\x07\x62\x37\x8f\x56\x5f\x6b\xca\x49\x42\x92\x13\x1b\x56\xf0\x0c\xe6\x7e\x30\xea\x1e\x3e\x7c\xad\x3f\xae\x36\x40\xda\x37\x30\xd8\xf8\xa3\xe4\x22\x9a\xa1\xa0\x5f\xbd\x81\xd5\x06\x56\x71\xec\x53\x11\x65\x84\x27\xb4\xc8\xdb\x11\x4f\x13\x5d\x6f\xb7\x3d\x11\x50\xd6\xda\x58\x5f\x92\xa7\xb7\x5b\xf8\xa9\xd6\x66\x29\x8c\x7d\xe8\xea\xb3\xb1\xbb\x01\x26\x32\xa8\x98\xe0\xa9\x26\xed\xde\x2e\x6b\x95\x8f\xeb\x13\xfa\x0f\x63\x7b\xb6\x76\x17\x06\x0d\x2b\x6c\x84\x53\x20\x9c\x9a\x1e\xdb\x78\x21\xa1\xaf\x2e\xc8\xdf\x36\x02\xac\x31\x11\x2a\x15\x4f\xf3\x41\xc3\x8a\x90\xd2\xa0\x63\x63\xe0\xa2\x32\x8a\x58\x38\x95\x99\xde\x19\x15\xc5\xb0\x3e\x36\xce\x2b\xfd\xa6\x5d\xd0\x59\x32\xa5\x77\xac\x18\xd8\x75\x4f\xef\xb1\x35\xf3\x1c\x69\xe8\x9d\x97\x2e\x50\x41\x89\x66\x27\xb3\xd3\x79\x72\xa2\x2a\x8a\x21\xfa\xf0\xf1\xfa\xde\xe0\x34\x0b\x78\xab\xdc\x40\xd4\x26\x43\x62\x8d\xdd\x66\x70\x19\xeb\x1f\xa2\x7c\xc0\xa4\x5a\x9c\x31\x6a\x3d\xb7\xea\x40\x5f\x64\x15\x38\x03\x62\x67\x19\x19\x26\x7c\xad\xe3\xbc\x6d\x85\xe2\x30\x30\x65\xf5\x79\x1e\xf6\x38\x51\xb9\x8c\xbf\x6e\xe1\x02\x4c\x59\x8d\x04\x38\xb0\x33\xbf\x48\x05\x89\xfe\xad\xb0\x3f\xa2\x2e\x0a\x2e\xcc\xf8\x5f\x1b\xd5\xf7\x4b\x47\xc1\x0f\x4a\x5d\xf2\xe2\x9d\x51\x70\xe1\xd0\xe8\xe4\x12\xef\xa2\x95\xab\xb6\x2a\x69\x4f\x37\x1b\xf4\xbc\x58\xc5\xb0\xdd\x82\x14\x08\x15\x2a\x57\xb0\xe4\x52\x41\xc5\xd2\x5b\x76\x83\x90\x16\x4c\xef\x50\xbb\x33\x33\x65\xe2\xe8\xc4\x4c\x99\x10\xcb\x07\xe6\x11\xe7\x24\x1b\x39\x1b\x46\xf1\xae\x8f\x81\xa2\xfe\xf0\x54\x70\x42\x17\x7b\xee\x2c\x59\x47\xf9\x65\x24\x95\x08\xb5\xe9\xff\x0d\xdc\xf1\x0c\x95\xaf\x33\x65\x0e\x9a\xec\x63\xd7\x05\x5a\x68\x3a\xb1\x52\x99\xe2\x0d\x2a\x5f\x13\x36\xae\xe6\x64\xc6\x85\x92\xac\x6c\xe1\xb6\x43\x28\xb8\x36\x96\x0b\x6c\x2b\xcc\x38\x8a\xf4\x3e\x0c\xf4\x1d\x37\xe9\x0e\x1a\xf2\xbe\x2b\xbf\x22\x52\x6c\x0d\x4f\xdd\xd9\x63\xfe\xf2\xe7\xd7\x27\x4c\x6e\x62\x2f\xe5\x42\xca\x89\xb9\x68\x5a\x0e\xa6\x26\x76\xe9\x7f\xe2\x7d\x4a\xb8\x0b\xd1\x45\xb8\x28\xa3\x53\x8e\xb4\x59\x6f\xe7\x58\xa6\x6a\xc6\xd1\xc9\xf6\x39\x91\xe4\x1d\xcd\x1b\x68\x7c\x2c\x6b\xa3\x28\x77\x26\x6f\x8c\xe4\x51\x13\x7f\xe7\x06\x26\x3e\x98\xda\x3a\x37\x93\x15\x7e\xb7\x06\x01\xc5\x76\xd0\x8f\x45\xae\x85\xeb\xb6\xd6\xc3\x70\xfd\x4e\x6b\xe2\x2f\x04\x7b\xbf\xfe\x93\xc2\x3f\x14\x1f\x83\xa3\xd9\x87\xcc\x83\x01\xb3\x3e\xd6\x41\x48\xbc\x81\xd6\x3e\x9f\x46\x4e\xe5\x82\xd0\x99\x66\x57\x59\x0f\x4b\xd7\x8f\x59\xbb\x7e\x5c\x4c\xaf\xbd\xae\xff\xc2\xae\x99\xea\xf5\x81\x6e\x67\xc2\x73\x68\xcf\x0b\xc9\x48\x3d\x65\xc2\x5f\xb5\x14\xc3\xf1\xa6\x01\x1b\x54\xf7\x66\x67\x2b\x40\x8a\x23\x2f\x69\x6b\x06\xf3\x2d\xbd\x11\x75\x79\x8d\xea\x41\x6e\x9e\x64\x89\x67\x61\xb6\x7e\x4e\xb7\xd5\xcf\xea\xb7\xf5\x3e\x8d\x7e\xae\xfa\x73\xd9\x68\xfd\xa5\xb2\xef\xfa\xe9\xd2\x6f\x1f\x06\x63\x81\x11\x9e\xac\x2a\xb4\x2b\x28\xb7\x5b\x70\x67\xe2\xec\x90\x77\xe7\xa5\x1b\x7b\x54\x6f\x6c\x25\xa9\xda\x9b\x9e\xb4\x0b\x35\xdf\xbe\xd8\xdb\x8c\xe5\x8f\xeb\x2b\xbe\x84\x35\x36\x56\xa3\x76\x62\xcb\x58\x8a\xf9\x3f\x43\xb1\x9c\x17\xec\xc6\x9b\x78\x85\x47\xe5\xe8\x5b\x59\x30\x71\x03\x24\xe4\x6b\x8c\xd1\x48\x20\x1b\xcf\x95\x48\x68\xc8\x9b\x63\x83\x31\xd6\xa2\xcd\xd9\x9a\x93\x02\x20\x1c\x0f\x95\x49\xa1\xe9\x8a\xe7\xb7\xe7\x6d\x7c\x8b\xc6\x4c\x99\x7c\xc8\xc8\xb7\x48\x95\xfc\xa4\x84\x9b\x70\xb8\x6e\xfd\x9a\xef\xa9\x92\x9c\x2d\x7a\xc3\xcd\xae\xbe\x4e\x52\x59\x6e\x75\x95\xff\xf1\x4f\xdb\xea\xaf\x44\xe4\x8c\xa3\x33\x2b\x93\xd2\x83\x1b\x17\xbf\xea\xec\xaa\x64\x75\xb2\x8e\x5e\x28\xa1\xc9\x8f\xb6\xec\xbd\xac\x8b\x62\xd6\x33\x69\xa3\xea\xd4\x74\xd4\x91\x4e\xdf\xcf\x1e\xc3\xe0\x17\xdb\xce\xd2\x1e\x0d\xae\xa5\x2c\xba\x6e\xbb\x86\x37\x59\x06\x5a\x96\x04\x2c\x97\xb4\xfd\x8d\x84\xbb\x1d\x9a\x1d\x95\xd9\x3b\xae\x7d\x5e\xb8\x63\xda\xde\x83\x65\xb5\xc5\xb4\xef\x62\xe8\x49\x2a\xdb\x97\xae\xb7\xbd\xbf\xec\x98\x74\x69\xc1\x15\x9a\x20\x98\xac\x49\x2d\x33\xb8\x9e\xd9\x12\x78\x89\x77\xc7\x90\x6c\x74\x1d\x56\xdf\xed\x02\x72\xbb\x2d\xda\x64\xa8\xd8\x6d\x8f\x70\x8f\x7a\x03\x77\x08\xfc\x46\x48\x85\x0e\x83\x8d\xcf\x0d\x70\x03\x77\xbc\x28\xe0\xd7\x5a\x1b\xb8\x46\xa0\x3e\x41\xb8\x1e\xdf\x15\xc9\x83\xa7\x7c\x70\xfc\xa7\x9d\xc4\x92\x81\x8f\xec\x26\xfc\x25\xeb\x84\xb9\x36\xa1\x3d\x7b\x01\x46\xd5\xb8\x67\x6d\xb1\xed\x68\x93\xf9\xbd\x41\x9b\x38\x5f\x2f\x74\x23\x1b\xc8\x59\xa1\x71\xd6\x94\xb8\x84\x3d\x57\x94\xec\xad\x8f\x89\xe8\x41\x69\xb4\x4f\xfa\xf1\x94\x33\x9f\x77\x0e\x0f\xa2\xcf\x4e\x90\x4b\x74\x3e\x98\x24\x79\x0e\x5f\x79\x43\x27\xdd\xac\xe0\xc5\x70\x67\x75\xdc\x5a\xb1\x34\xc5\xca\x68\x97\x58\x6d\x2b\x45\x96\xbb\x86\x2b\x99\xa7\xdd\x19\x43\x4f\x7a\x22\x3c\x17\xe0\xf1\x18\x9b\x7b\x77\xe1\x54\x73\x61\x76\xf6\xba\xe5\xc7\xab\x9f\x2f\x21\x95\x4a\x61\x6a\x8a\x7b\xd0\xa8\x38\x2b\xf8\x3f\xa9\x3b\x5d\xca\x4e\x46\x02\xcd\x18\x60\x8a\x45\x98\x13\xd5\xcb\xd7\x2f\xee\x13\x0f\x85\xd5\x95\xbd\x30\x58\xd1\xdf\x95\x85\x2f\x7c\x5c\x4e\xe0\x53\xed\x9a\x78\x9d\x91\x98\xfb\x6c\x4a\x8a\xbf\xcf\xf1\x8a\x97\x2f\x73\x66\x80\x33\x7c\x08\x72\xae\x64\x39\x03\xbd\x98\x1c\x0e\x56\x88\xae\x17\xee\x76\x26\x49\x20\x0c\x1a\xa6\xa0\x9d\xa6\x11\xb7\x6f\x5f\x5f\x38\xbc\xa3\xb6\xe8\x7a\x03\xdf\xb4\xf3\xdb\x9d\x85\xcb\x1d\xb7\xeb\x85\xdb\xe6\x6d\x3c\x3b\x93\x0f\xc3\xe1\x30\x32\x98\xc8\x3e\xe3\xa4\x22\xd7\xb9\xc3\x8a\xc0\x1d\x8f\x9f\x3f\x14\xae\x8c\x7a\xe4\xb9\x40\x9e\x7c\xde\xa3\xe1\xa9\x36\xb8\xb5\xf4\x77\xde\xe3\xbf\xe3\xc6\xb6\xf0\xfe\x1f\xf7\xb6\x05\xfe\xbf\xb2\xbd\x0f\x76\xf7\xbe\x87\xd8\x7f\x67\x1f\x3f\x63\x8e\xdf\xda\x17\xbe\xbb\x90\xe3\xba\xce\x57\xbd\x93\xcf\x7a\xb9\x54\x29\xda\x8f\x54\x40\x35\xef\x10\x81\xee\x53\x51\xdf\x2f\x5c\x0c\xdb\xaf\x38\xb6\x76\x11\xac\x1c\x35\xf9\x8f\x82\x4b\xa2\x0e\x17\x39\xcc\xde\x86\xca\x1c\x2a\xa9\x35\xbf\x2e\x86\x2b\xcc\xe1\xfa\x54\xe6\xcb\x9f\x07\x17\x94\x46\x31\x7c\xf8\xb8\x2f\xe1\x4d\x59\x91\x27\x4a\x76\x8b\xd1\xf0\x7e\x03\x05\x2e\x7f\x82\x8a\xa9\xf7\x97\xd5\x7d\x64\xaf\xe1\x17\x25\x46\x6f\x98\xb2\xda\x7b\xe3\xe5\xd4\x09\xff\x0e\x00\x00\xff\xff\xcb\xcb\x09\xbe\xeb\x20\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0x4f, 0x1d, 0x15, 0x13, 0x49, 0x65, 0xdb, 0x10, 0xa2, 0xc, 0xd2, 0xf6, 0xa5, 0x15, 0xa, 0x18, 0xbc, 0x31, 0xf4, 0x6f, 0x6c, 0x2a, 0x66, 0x74, 0x26, 0xcf, 0xf8, 0x92, 0x8f, 0x13, 0xcf}}
	return a, nil
}

var _headerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcc\xb1\x0e\x82\x30\x10\xc6\xf1\xbd\x4f\xf1\xa5\x93\x0e\xc0\xee\x88\x38\xb8\x48\x62\x88\x7b\xb1\x07\x36\x4a\x4b\x6a\x21\x21\x97\xbe\xbb\x69\x20\xc1\xed\xfe\xf7\xbb\x1c\x73\x06\x4d\x9d\xb1\x04\xf9\x22\xa5\xc9\xcb\x18\x45\x51\xe0\xec\x34\xa1\x27\x4b\x5e\x05\xd2\x68\x17\xf4\x2e\x23\x3b\x0d\xa8\x6a\xdc\xea\x06\x97\xea\xda\xe4\xe9\xf2\x41\xfe\x6b\x9c\x3d\x81\x19\xf9\xbc\x06\xd6\x27\x77\x9a\xcd\x6e\x7e\xab\x0d\xcb\xc9\x7c\x34\x2a\x15\x68\xe5\x36\x75\xca\x3f\x0f\x28\x97\x5d\x43\xb9\x24\x13\xa3\x7a\xbe\x55\x4f\x60\xce\xb7\x31\x6d\xcd\x30\x3a\x1f\x70\x10\x00\x20\xbb\x21\x48\x71\x14\xcc\x64\x35\xb2\x18\xc5\x2f\x00\x00\xff\xff\xa2\xe9\xf5\xff\xea\x00\x00\x00")

func headerTmplBytes() ([]byte, error) {
	return bindataRead(
		_headerTmpl,
		"header.tmpl",
	)
}

func headerTmpl() (*asset, error) {
	bytes, err := headerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xbd, 0xed, 0xe9, 0x78, 0x6, 0xe3, 0x75, 0xde, 0xfa, 0xe5, 0xac, 0x60, 0xe0, 0xef, 0x3e, 0x97, 0x36, 0xba, 0xdd, 0xd, 0x8f, 0x6, 0x13, 0x69, 0xab, 0x50, 0xc8, 0x8f, 0x75, 0x28, 0xa5}}
	return a, nil
}

var _string_enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\xdf\x6f\xdc\xb8\x11\x7e\x96\xfe\x8a\xb9\x45\x72\x95\x16\x8a\xb6\x45\x8b\x3e\xe4\xb0\x0f\xee\xd5\x35\xee\x70\xd9\x1a\xdd\xdc\xbd\x18\x46\x42\x4b\x94\x97\x17\x89\xd4\x91\xdc\x5d\xb9\x82\xfe\xf7\x62\x48\xea\xe7\xca\x6b\x5f\x90\x3a\x28\xfa\x12\xac\x44\x6a\x38\xf3\xcd\x37\xdf\x0c\x9d\xba\x7e\x03\x29\xcd\x18\xa7\xb0\x50\x5a\x32\x7e\xff\x81\xf2\x7d\xb1\x68\x1a\x3f\x11\x5c\x69\x08\x7c\xdc\xf2\x0a\x5f\x6e\x48\x41\xe1\xed\x1a\x62\x7c\x88\xcd\xd3\x9b\xa6\xb1\xeb\xb9\x38\x52\x99\x10\x65\x37\x74\x4f\x66\x19\x24\xe1\xf7\x14\x5e\xc9\x1f\x78\x4a\xab\x08\x5e\x1d\x48\xbe\x1f\x58\xfa\x05\x1f\x15\x34\x8d\xef\xd5\x35\xb0\x0c\xe8\x6f\x6e\x8f\x3d\x64\xf1\x61\xd1\x34\xab\x15\x6c\x3f\xb1\xb2\xa4\x29\xd8\xa5\xba\xa6\x39\x1e\xb0\x5a\x41\x5d\xbb\xed\xd7\x92\x66\xac\xa2\x29\x7e\xd6\x34\xc0\x14\x10\x5c\x6c\x9d\x6f\x1a\x10\x19\xe8\x87\x92\xf6\x9f\xd8\xf7\x68\x8d\xa7\xd6\x83\x37\xe8\x82\x5b\xfd\x5e\x14\x05\xe5\x1a\x17\x86\xe7\x0c\x5e\xe3\x7e\xfb\x29\x00\x3c\xea\x49\x1f\x97\x05\x01\xfe\x08\x4d\x33\xf2\xcc\x39\x00\x6b\xf8\xd8\x19\xd9\x6a\x69\xb0\x69\x9a\x8f\x7e\x7f\x4e\xe8\xfb\x75\xbd\x5a\xc2\xdf\x2e\xaf\x7e\xd8\xc0\xe6\xe2\xdd\xe5\x16\x96\x2b\x8b\x34\xcb\x20\xe6\xa4\x30\x68\x1e\x88\x84\x0f\x75\xdd\x67\xab\x69\x36\x66\x69\x0d\x37\xb7\x36\xd7\xb5\x31\xfb\xec\xf4\x80\x8b\x83\x0b\x0d\xc1\x69\x92\xc2\xa6\x99\xf5\x3d\x6a\xc1\xed\x63\x68\x7c\xdf\xe0\x79\xea\x9c\xa4\x7a\x2f\x39\x26\x2e\x67\x4a\x63\xbe\x4a\xa1\x14\xbb\xcb\x29\x58\x9f\x6d\xfa\x15\xae\x8c\xbf\x8f\xfd\x6c\xcf\x93\x39\xa3\x41\xd8\x45\x0c\xb5\xef\xd9\x23\x06\x20\x78\x2f\x8a\xc2\x80\x32\x1e\x22\x51\xd7\xf8\x84\xa5\x64\xd2\x7a\xb9\xf9\xfb\x30\xa9\x36\xd7\x3f\x09\xf1\x69\x5f\x2a\xfb\x6a\x26\xb1\xef\x48\x09\x6b\x28\x48\x79\x33\x7e\x8f\x21\xee\x13\x5d\x37\x2f\x93\xe9\xb7\x50\x37\xf3\xd9\x9e\xf1\xd9\x7c\xe4\xbc\xb6\x99\xb8\x1d\x6f\x78\x31\x9f\xe7\x8b\x36\x9a\x6a\x02\xe1\xe9\x50\xe8\x82\xf6\xa0\xc0\xbc\x83\x89\xe9\xf0\xe4\x45\x68\x24\xee\x63\x5d\xcf\xee\x3f\xeb\x4a\x47\x9a\x4e\x71\x1d\xb2\xf8\xd3\x91\x66\xc4\x11\x2c\xaf\xad\x65\x3c\x2b\xca\x9c\xa2\x5c\x29\xd0\x3b\xea\xde\x52\x09\x8c\x6b\x2a\x33\x92\x50\x57\x38\x41\x35\xa9\x9d\xd0\xed\x0d\x42\xe8\x8b\x87\x65\xf0\x21\x02\xf1\x09\x33\x70\x4a\xc2\x9b\xea\xf6\x3b\x5c\xac\x7d\xaf\x2d\x33\xfb\x69\x50\x85\xc8\xf6\xf6\x65\x56\xe8\x78\x5b\x4a\xc6\x75\x16\x2c\xc6\x56\x82\xd7\x2a\x5c\x44\xfd\x67\xa1\x29\x91\xd5\x12\xce\x71\xa8\xae\x61\xcf\x0b\x52\xb2\xec\xc1\xf2\x62\xd0\x83\xa0\x69\x7a\x4c\xae\x89\x54\x74\x6c\x03\x88\xd6\xb4\x28\x11\x1e\x01\x89\xe0\x07\x2a\x35\x90\x36\x64\x2d\x4c\x0f\x99\x11\x9a\x19\x53\x01\x6a\xaf\xfb\x32\x84\x60\xbc\x18\x01\x95\x52\xc8\xd0\xa1\x58\x3d\x82\xa2\x09\xe9\x06\x0d\x9d\x40\x59\x45\xc0\x59\xee\x7b\x4d\x5d\x1b\xa1\x17\x2e\x3c\xd3\x9c\xbe\xc7\xdf\x8c\x2b\xca\x15\xd3\xec\x40\xa1\x44\xff\x22\x48\x31\x00\x45\x4b\x22\x89\xa6\x90\x1b\x92\x60\x54\xa5\xa4\x07\xca\x35\xec\x39\xa7\x09\x55\x8a\xc8\x07\x48\x84\x95\xdc\x16\x3b\x04\xa0\x43\x82\x65\x70\xa4\x90\x0a\xfe\x07\x0d\x9c\xd2\x14\xb4\x88\x9f\x11\x89\xfd\x5a\xc5\xef\xc5\x4f\x68\xd5\x40\x14\x9e\x0b\xad\x13\x47\x17\xa5\x69\x0b\x48\xfb\x76\xef\x04\xf3\xc5\x22\x8c\x0c\xa1\x2e\x11\xde\x2c\x58\xbc\x56\xd8\xf9\xb1\x3a\x09\x36\x0b\x96\xc2\x34\x11\x5a\x3e\xc0\xcd\x6b\x75\xbb\x88\x00\xcd\xb7\x6c\x53\xf1\x8f\x82\xf1\x60\xae\x69\x46\xb0\x88\x60\x11\x86\xae\x10\x73\x45\xbf\xa8\x4b\xce\x91\x70\xd8\x1c\x5a\xed\x7f\xf7\xf3\xf6\x3d\x5c\x5f\xfc\x6b\x7b\x39\x6a\xf3\xc5\x5e\x69\x93\x62\x24\xc0\x6a\x05\xef\xf6\x4a\xcf\xb1\xdb\x31\x5a\x9d\xa5\x74\x64\xc4\xad\x24\x9c\x25\x0a\xad\x3b\x67\x8d\xab\x8e\xee\x8f\xd8\x1f\x53\x7e\x72\x76\xed\x7b\x07\x92\x1b\xe2\x23\x3f\x1e\xfb\x3c\x34\x34\xc2\x4d\xdf\xac\x91\x06\x86\x18\xc6\x99\x80\x4a\x39\x12\x8e\x03\xc9\x8d\x1e\x58\x88\x5a\x2c\x4a\x2d\x11\x85\xc7\x64\xec\x5a\xcb\x20\x84\xe5\xa9\x73\xce\xe8\xb7\xd5\x8c\xcd\x82\x48\xb5\x23\x79\x8b\xae\x7d\x7a\x4f\x2b\x3d\x15\x54\x8d\xef\xdc\xee\x9c\x4a\x28\xa8\xde\x89\xf4\x71\x51\x1d\x98\x0a\x42\x08\x6e\x6e\xef\x1e\x34\x1d\x8a\x43\x37\x9f\xe0\x42\x50\xc5\xad\x0a\x87\xb6\x46\xac\x90\xfd\xcc\x8b\x27\x5c\xda\xf3\x33\x4e\x2d\xa7\x5e\x8d\xec\x05\xc6\x80\x75\x20\xb4\x9e\xa1\x63\xdc\x5d\x00\x9c\x36\xe3\xa6\xd0\xf7\x74\x51\x7e\x5e\x86\x5d\x9c\x54\x4a\x93\xe1\x65\x05\x6b\xd0\x45\xd9\x01\x60\x83\x9d\xe4\x45\x48\x88\xd5\x6f\xb9\xf9\x87\xef\xf3\x9c\x71\xdd\xfd\x56\x5a\xce\x8f\x47\x97\x52\x6e\x58\x7e\xad\x25\xac\x6d\x34\x2a\xde\xd0\x63\xb0\xb0\xb3\x44\x29\x4c\x2b\x34\xa4\x67\xf9\x22\x84\xd5\x0a\x04\xa7\x50\x52\x69\x2f\x0b\x99\x90\x50\x92\xe4\x13\xb9\xa7\x90\xe4\x44\xed\xa8\xb2\x0d\x36\x21\xfc\xa4\xbd\x26\x84\xf3\xf9\xee\x7a\x82\x39\xee\x0d\xac\x0f\xdd\xf6\xba\x09\x01\x59\x3f\x6e\x16\x76\xd3\xba\xc7\xce\x80\x75\xaa\x3a\x1d\xaa\x88\xa8\x69\x0b\x17\x70\x64\x29\x95\x6e\x8c\x12\x19\x28\x74\x90\xe0\x3c\x8d\xb1\xa9\xd8\xec\x4a\x25\x3b\x50\x69\x87\xa9\x76\xc0\x26\xda\x72\x49\x94\xe6\xd6\xb4\xa3\x76\x22\x47\x30\x68\x55\xd2\x94\x51\x9e\x3c\xf8\x9e\x3a\x32\x9d\xec\xe0\x80\xe9\xb7\xb3\x4b\x80\x86\x8d\xe7\xa6\x3f\x59\xb6\xbc\x35\x4e\x5b\xa2\xcc\xf3\xe4\x10\x5a\xc1\x1f\x24\x16\x15\x76\x86\x38\xe8\x31\x4a\x38\xca\x9f\x11\xb4\x9d\x05\x10\xa7\x1a\x8b\x14\xe9\xe5\x0e\xf7\x5b\x04\x23\x38\x38\x9a\x2a\x2d\x51\x16\xe3\x0b\x2d\x58\x70\x08\xbf\xb3\x0b\x03\x78\x87\xbe\x4e\xdd\x24\xb9\x2b\x44\xcf\x43\xda\x7a\x4d\x37\x27\x9a\x70\x6d\xd5\x3c\x1d\xae\x2b\xa2\x43\xf8\x95\xc2\xee\xcf\xff\xa2\xe1\x8f\xb7\xbf\x6d\xa9\x7a\x70\xcb\xcb\xd3\x75\xf4\xd2\x1d\x6e\xce\x76\xd5\xff\x58\x09\xfb\xf6\x58\x63\x75\xd9\x99\xed\x49\xf6\xb9\xe6\xce\xe5\x6a\xf9\xb5\xb8\xb9\xfc\x72\xe4\x6c\x7c\xaf\x53\x56\xff\x51\x39\x55\xb6\x93\xae\x56\x60\xb5\x60\xa2\x6e\x56\x27\xec\xda\xb3\x6e\x10\x66\x27\xb6\xb9\xa1\xc2\xcc\x34\xbb\xbe\xcb\x45\x9d\xee\xdb\x31\xeb\x6b\x78\xc3\xb8\xfe\xeb\x5f\x82\x6a\xe0\x4b\xd7\x83\xdc\x8f\x76\x4a\xc8\x72\x72\xef\x5c\xdc\xd2\x93\x3e\x7c\x25\x72\xc2\xef\x01\x37\x39\x6d\xed\x9c\x04\xf4\xf1\x5c\x6f\xa0\x1a\xb3\xd9\x4d\x56\x5d\x13\x3e\x9c\x6d\xb6\x48\x00\xbf\x2b\xb9\x41\x87\xb5\x53\xc3\xd5\x79\x1f\xaf\xa8\xd6\x43\x24\x9f\x72\xf2\x8a\xe2\x08\x33\xe8\x5d\x03\x0c\x97\x95\x3b\xf3\x3d\xb6\xd0\xc9\xa1\xf7\x4c\xef\xf6\x77\x71\x22\x8a\x95\x2a\xb3\x3f\xfd\x79\x55\xfe\x03\x81\x9c\x60\x74\xe6\x64\x34\x3a\xba\x97\xba\x53\x27\x97\xc9\xc5\xa3\x03\xc4\xcc\xec\x80\x79\x34\xfd\x7e\xb3\xcf\xf3\xc9\xb0\xe8\xfe\x8e\x82\xf3\xf9\xf0\xfd\xe4\xd1\xf7\x7e\x31\xc3\x3d\xd6\xa8\x77\x27\x44\x6e\x06\xf8\x8b\x34\x05\x25\x0a\x0c\x2c\x13\x58\xfe\x5a\xc0\x71\x47\xf5\x0e\xe7\x8b\x1d\x53\x4e\x17\x8e\x44\x81\xa2\x1a\xd2\xbd\x89\xa9\x1f\xdf\xf0\x49\x48\x33\x90\xe3\x05\xc0\x2a\xd1\x60\x3c\xf5\xb6\x54\x7b\xde\xe0\x4c\xf3\x87\x02\x7b\x83\x30\x00\x6e\xe8\xf1\x34\x24\xc3\xae\xf1\xd8\x51\xcd\x44\x6e\xca\xa2\x8a\xdb\x51\xc5\x0c\x47\x0f\x78\x1f\x3a\x52\x60\xf7\x5c\x48\x6a\x63\x30\xfc\x8c\x80\x69\x38\xb2\x3c\x87\x5f\xf7\x4a\xc3\x1d\x05\x1c\x90\xb8\xbd\xf1\xd8\xe1\xa0\xcd\x94\x23\xc7\xef\x1d\xa1\xe6\x1c\x7c\xe6\x18\xe5\xfe\x8a\x33\x40\xae\x8a\xb1\x66\xd7\xa0\xe5\x9e\xf6\xa8\xcd\xce\x5b\x55\x3c\xbd\x30\x55\xb1\xcd\xf5\xdc\x18\x16\x41\x46\x72\x45\x27\xd3\x98\x55\xec\xa9\xa5\xb8\x77\x3f\x44\xa4\x5b\xab\x41\xaf\xfa\xe1\x04\xb4\xcf\x13\xc3\x39\xe8\x9e\x14\x44\x96\xc1\x37\xce\xa7\xc1\xc8\xce\x59\xde\xde\xd7\x07\x0a\x3e\x8d\x6b\x22\xe8\x67\x2f\x56\x3f\x6e\xff\xb9\x81\x44\x48\x49\x13\x9d\x3f\x80\xa2\x92\x91\x9c\xfd\x1b\xc7\xd0\xb9\x72\xd4\x02\xf0\x8b\x36\x38\x3e\x1b\xdc\xc0\xf4\xfc\x45\xcb\xfe\x0f\x07\x56\xff\xd6\x5c\x0d\x16\xf8\x73\x61\x82\xe6\x2e\x0f\x83\xa0\x7f\x55\x82\xc7\xce\x66\xc0\x27\xd1\x8e\x2e\xa9\xee\xe6\xe6\x0c\xcf\x5f\xdb\x26\x01\xa7\xf4\xa9\x90\x33\x29\x8a\x49\xd0\xb3\xd5\x30\x3a\x21\xb8\x9b\xb9\xc5\x0d\x58\x8f\xf7\x73\x09\xd5\xb0\x6e\x2c\x4f\xdf\xae\x6d\xbc\x9d\xb5\xe0\x2e\x82\x6f\xab\xe9\x3d\x6e\xe6\x1a\x67\x59\xce\x2d\xad\xab\x70\xd2\x84\xfa\x32\x9b\xfc\x74\x7f\x5f\xfd\xfd\xd2\x8c\xa9\xb3\xea\x8c\xc1\x9d\xae\x9f\x57\xc1\xad\x96\xcf\x14\x42\xcc\xe4\x7f\x57\x0b\xbf\x54\x59\x1b\x4f\x5f\xb2\xb2\x5f\xb6\xb0\x4d\x78\xff\x8f\xb5\x6d\x02\xff\x5f\x29\xef\x51\x75\xdb\x01\xec\x3f\x01\x00\x00\xff\xff\xeb\xb8\xfd\x8c\x6c\x1e\x00\x00")

func string_enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_string_enumTmpl,
		"string_enum.tmpl",
	)
}

func string_enumTmpl() (*asset, error) {
	bytes, err := string_enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "string_enum.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc, 0xd1, 0x3d, 0xf5, 0x74, 0xba, 0x95, 0x32, 0xed, 0x98, 0x1a, 0xda, 0x6, 0x25, 0xee, 0x72, 0x43, 0xf, 0xbb, 0x29, 0x9d, 0x6f, 0xf8, 0xb5, 0x7, 0xa6, 0x60, 0x85, 0xc5, 0x4e, 0xe0, 0x6}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl":        enumTmpl,
	"header.tmpl":      headerTmpl,
	"string_enum.tmpl": string_enumTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl":        {enumTmpl, map[string]*bintree{}},
	"header.tmpl":      {headerTmpl, map[string]*bintree{}},
	"string_enum.tmpl": {string_enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
